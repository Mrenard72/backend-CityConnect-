const express = require('express');
const router = express.Router();
const Event = require('../models/Event'); // üìå Import du mod√®le
const authMiddleware = require('../middleware/auth'); // üîí Middleware d'authentification

// ‚úÖ 1. Cr√©er un √©v√©nement (authentification requise)
router.post('/', authMiddleware, async (req, res) => {
    try {
        console.log("üîç Utilisateur connect√© :", req.user);

        if (!req.user || !req.user._id) {
            return res.status(401).json({ message: "Utilisateur non authentifi√©." });
        }

        const { title, description, location, date, category, maxParticipants, photos } = req.body;

        // ‚úÖ V√©rifier si tous les champs requis sont fournis
        if (!title || !description || !location || !date || !category || !maxParticipants) {
            return res.status(400).json({ message: "Tous les champs obligatoires doivent √™tre remplis." });
        }

        const newEvent = new Event({
            title,
            description,
            location,
            date,
            category,
            createdBy: req.user._id,
            maxParticipants,
            photos: photos || [] // Ajoute des photos si fournies, sinon tableau vide
        });

        await newEvent.save();
        res.status(201).json({ message: '√âv√©nement cr√©√© avec succ√®s !', event: newEvent });

    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de l'√©v√©nement :", error);
        res.status(500).json({ message: 'Erreur lors de la cr√©ation de l‚Äô√©v√©nement', error });
    }
});

// ‚úÖ 2. R√©cup√©rer tous les √©v√©nements
router.get('/', async (req, res) => {
    try {
        const events = await Event.find().populate('createdBy', 'username');
        res.json(events);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements :", error);
        res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des √©v√©nements', error });
    }
});

// ‚úÖ 3. R√©cup√©rer un √©v√©nement par ID
router.get('/:id', async (req, res) => {
    try {
        const event = await Event.findById(req.params.id).populate('createdBy', 'username');
        if (!event) return res.status(404).json({ message: '√âv√©nement non trouv√©' });

        res.json(event);
    } catch (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration de l‚Äô√©v√©nement :", error);
        res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration de l‚Äô√©v√©nement', error });
    }
});

// ‚úÖ 4. Mettre √† jour un √©v√©nement (authentification requise, seul le cr√©ateur peut modifier)
router.put('/:id', authMiddleware, async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) return res.status(404).json({ message: '√âv√©nement non trouv√©' });

        if (event.createdBy.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: 'Non autoris√© √† modifier cet √©v√©nement' });
        }

        Object.assign(event, req.body);
        await event.save();

        res.json({ message: '√âv√©nement mis √† jour avec succ√®s', event });
    } catch (error) {
        console.error("‚ùå Erreur lors de la mise √† jour :", error);
        res.status(500).json({ message: 'Erreur lors de la mise √† jour', error });
    }
});

// ‚úÖ 5. Supprimer un √©v√©nement (authentification requise, seul le cr√©ateur peut supprimer)
router.delete('/:id', authMiddleware, async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) return res.status(404).json({ message: '√âv√©nement non trouv√©' });

        if (event.createdBy.toString() !== req.user._id.toString()) {
            return res.status(403).json({ message: 'Non autoris√© √† supprimer cet √©v√©nement' });
        }

        await event.deleteOne();
        res.json({ message: '√âv√©nement supprim√© avec succ√®s' });
    } catch (error) {
        console.error("‚ùå Erreur lors de la suppression :", error);
        res.status(500).json({ message: 'Erreur lors de la suppression', error });
    }
});

// ‚úÖ 6. Participer √† un √©v√©nement
router.post('/:id/join', authMiddleware, async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) return res.status(404).json({ message: '√âv√©nement non trouv√©' });

        // V√©rifier si l'√©v√©nement est complet
        if (event.participants.length >= event.maxParticipants) {
            return res.status(400).json({ message: "L'√©v√©nement est complet." });
        }

        // V√©rifier si l'utilisateur est d√©j√† inscrit
        if (event.participants.includes(req.user._id)) {
            return res.status(400).json({ message: "Vous √™tes d√©j√† inscrit √† cet √©v√©nement." });
        }

        event.participants.push(req.user._id);
        await event.save();

        res.json({ message: 'Inscription r√©ussie √† l‚Äô√©v√©nement', event });
    } catch (error) {
        console.error("‚ùå Erreur lors de l'inscription :", error);
        res.status(500).json({ message: 'Erreur lors de l‚Äôinscription', error });
    }
});

// ‚úÖ 7. Quitter un √©v√©nement
router.post('/:id/leave', authMiddleware, async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        if (!event) return res.status(404).json({ message: '√âv√©nement non trouv√©' });

        // V√©rifier si l'utilisateur est inscrit avant de le retirer
        if (!event.participants.includes(req.user._id)) {
            return res.status(400).json({ message: "Vous n'√™tes pas inscrit √† cet √©v√©nement." });
        }

        event.participants = event.participants.filter(id => id.toString() !== req.user._id.toString());
        await event.save();

        res.json({ message: 'D√©sinscription r√©ussie', event });
    } catch (error) {
        console.error("‚ùå Erreur lors de la d√©sinscription :", error);
        res.status(500).json({ message: 'Erreur lors de la d√©sinscription', error });
    }
});

module.exports = router;
